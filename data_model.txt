Tables:

Users
  - email (present, string)
  - name (present, string)
  - phone (present, string)

User:address -> one to many, need to differentiate shipping and billing? -> NOPE. Do in Orders.
Address
  - Foreign key (User_id)
  - street address (present, string)
  - city (present, string)
  - state (present if country = US, string (two letter code))  (could possibly foreign key to prepopulated table)
  - zip (present, integer)
  - country (present, string(country_code?))  (could possibly foreign key to prepopulated table)

User:credit_card -> one to many
CreditCard
  - Foreign Key (user id)
  - id
  - cc number (hash)
  - cc exp (hash)
  - cc csv (hash)


One category has many products

Category
  - id            (integer)
  - description   (string)

Products
  - id            (integer)
  - categoryid    (foreignkey: integer)
  - title         (string)
  - descriptions  (text)
  - price         (float)
  - SKU #         (set up unique index)


One user has one cart
Many carts have many products

Carts
  - id            (integer)
  - userid        (integer)

CartsProductsJoin
  - cartid        (integer)
  - productid     (integer)
  - quantity      (integer)


One user has many orders
One address (shipping) has many orders
One address (billing) has many orders

Orders
  - id                  (integer)
  - userid              (integer)
  - address_shipping_id (integer)
  - address_billing_id  (integer)

ProductsOrderJoin
  - order_id            (integer)
  - product_id          (integer)
  - quantity            (integer)
  - cost                (float)

When customer checks out, cart --> order

Order can ship to any address (default to default), can bill to any address (default to default)




